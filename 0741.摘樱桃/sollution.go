package main

import (
	"fmt"
	"math"
)

func Max(a int, b int) int {
	if a > b {
		return a
	}
	return b
}

func Min(a int, b int) int {
	if a > b {
		return b
	}
	return a
}

func cherryPickup(grid [][]int) int {
	N := len(grid)
	var dp = make([][][]int, 2*N-1)
	for i := 0; i < 2*N-1; i++ {
		dp[i] = make([][]int, N)
		for j := 0; j < N; j++ {
			dp[i][j] = make([]int, N)
			for k := 0; k < N; k++ {
				dp[i][j][k] = math.MinInt
			}
		}
	}

	dp[0][0][0] = grid[0][0]
	for k := 1; k < 2*N-1; k++ {
		for x1 := Max(k-N+1, 0); x1 <= Min(k, N-1); x1++ {
			if grid[x1][k-x1] == -1 {
				continue
			}
			for x2 := x1; x2 <= Min(k, N-1); x2++ {
				if grid[x2][k-x2] == -1 {
					continue
				}
				prestatus := dp[k-1][x1][x2]
				if x1 > 0 {
					prestatus = Max(prestatus, dp[k-1][x1-1][x2])
				}
				if x2 > 0 {
					prestatus = Max(prestatus, dp[k-1][x1][x2-1])
				}
				if x1 > 0 && x2 > 0 {
					prestatus = Max(prestatus, dp[k-1][x1-1][x2-1])
				}
				prestatus += grid[x1][k-x1]
				if x1 != x2 {
					prestatus += grid[x2][k-x2]
				}
				dp[k][x1][x2] = prestatus
			}
		}
	}
	return Max(dp[2*N-2][N-1][N-1], 0)
}

func main() {
	testCases := []struct {
		grid [][]int
	}{
		{
			grid: [][]int{{0, 1, -1}, {1, 0, -1}, {1, 1, 1}},
		},
		{
			grid: [][]int{{1, 1, -1}, {1, -1, 1}, {-1, 1, 1}},
		},
	}
	for _, testcase := range testCases {
		fmt.Println(cherryPickup(testcase.grid))
	}
}

//[1,	-1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1]
//[1,	 1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1]
//[1,	-1, -1,  -1, 1, 1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1]
//[-1, 1,1,1,0,1,1,1,1,1,1,1,-1,1,1,-1,1,-1,1,1]
//[1,  1,1,1,1,-1,-1,1,1,1,-1,1,-1,1,-1,1,1,1,-1,-1]
//[1,  1,1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,1,1,-1,1]
//[1,  1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,1]
//[1,  1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1]
//[-1, 1,1,1,1,1,1,-1,1,-1,1,-1,1,1,1,1,1,1,1,-1]
//[1,  1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1]
//[-1, 1,-1,1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,1,0,1,1,1]
//[-1, 1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1,1,1,1]
//[1,  1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,-1,-1]
//[1,  1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1]
//[0,  1,1,-1,1,1,1,1,-1,1,-1,1,1,1,-1,-1,-1,1,1,1]
//[1, -1,1,1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,1,-1,1]
//[1,  1,1,-1,1,1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,1]
//[1,  1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
//[1,  1,-1,1,1,-1,1,1,1,1,-1,1,1,1,1,1,1,-1,0,1]
//[-1, 1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,1]